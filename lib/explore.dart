// import 'dart:ui';
//
// import 'package:dio/dio.dart';
// import 'package:flutter/material.dart';
// import 'package:nest_mobile/album.dart';
// import 'package:shared_preferences/shared_preferences.dart';
// import 'game_detail.dart';
//
// class ExplorePage extends StatefulWidget {
//   const ExplorePage({Key? key}) : super(key: key);
//
//   @override
//   _ExplorePageState createState() => _ExplorePageState();
// }
//
// class _ExplorePageState extends State<ExplorePage> {
//   List<String> photos = [];
//   bool isLoading = true;
//   int totalPhotos = 0;
//   double totalStorageUsed = 0; // Dung l∆∞·ª£ng ƒë√£ s·ª≠ d·ª•ng (MB)
//
//   @override
//   void initState() {
//     super.initState();
//     _fetchPhotos();
//   }
//
//   void _showFullImage(BuildContext context, String imageUrl) {
//     showDialog(
//       context: context,
//       barrierDismissible: true, // ‚úÖ Cho ph√©p ƒë√≥ng khi nh·∫•n ra ngo√†i
//       builder: (context) {
//         return Dialog(
//           backgroundColor: Colors.transparent, // ‚úÖ Kh√¥ng c√≥ vi·ªÅn tr·∫Øng
//           child: Stack(
//             children: [
//               // ‚úÖ L·ªõp n·ªÅn l√†m m·ªù
//               BackdropFilter(
//                 filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10), // ‚úÖ Hi·ªáu ·ª©ng blur n·ªÅn sau
//                 child: Container(
//                   color: Colors.grey.withOpacity(0), // ‚úÖ N·ªÅn x√°m nh·∫π v·ªõi ƒë·ªô trong su·ªët
//                 ),
//               ),
//
//               // ‚úÖ Hi·ªÉn th·ªã ·∫£nh (c√≥ th·ªÉ zoom)
//               Center(
//                 child: InteractiveViewer(
//                   child: Image.network(imageUrl, fit: BoxFit.contain),
//                 ),
//               ),
//
//               // ‚úÖ N√∫t "X" ƒë·ªÉ ƒë√≥ng
//               Positioned(
//                 top: 10,
//                 right: 10,
//                 child: IconButton(
//                   icon: Icon(Icons.close, color: Colors.white, size: 30),
//                   onPressed: () => Navigator.pop(context), // ‚úÖ ƒê√≥ng modal
//                 ),
//               ),
//             ],
//           ),
//         );
//       },
//     );
//   }
//
//   /// üìå L·∫•y ·∫£nh t·ª´ API
//   Future<void> _fetchPhotos() async {
//     try {
//       final prefs = await SharedPreferences.getInstance();
//       String? familyId = prefs.getString('familyId');
//
//       if (familyId == null) {
//         setState(() {
//           isLoading = false;
//         });
//         return;
//       }
//
//       String apiUrl = 'https://platform-family.onrender.com/album/$familyId';
//       Dio dio = Dio();
//       Response response = await dio.get(apiUrl);
//
//       if (response.statusCode == 200 && response.data['ok'] == true) {
//         List<Map<String, dynamic>> albums = List<Map<String, dynamic>>.from(response.data['data']);
//         List<String> fetchedPhotos = [];
//
//         for (var album in albums) {
//           fetchedPhotos.addAll(List<String>.from(album['photos']));
//         }
//
//         setState(() {
//           photos = fetchedPhotos;
//           totalPhotos = fetchedPhotos.length;
//           totalStorageUsed = totalPhotos * 5.0; // M·ªói ·∫£nh 5MB
//           isLoading = false;
//         });
//       } else {
//         setState(() {
//           isLoading = false;
//         });
//       }
//     } catch (e) {
//       print("Error fetching photos: $e");
//       setState(() {
//         isLoading = false;
//       });
//     }
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         automaticallyImplyLeading: false,
//         title: const Text('Kh√°m ph√°', style: TextStyle(fontWeight: FontWeight.bold)),
//       ),
//       body: SingleChildScrollView(
//         padding: const EdgeInsets.all(16),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             // Album l∆∞u tr·ªØ
//             _buildAlbumStorage(context),
//
//             const SizedBox(height: 20),
//
//             // Tr√≤ ch∆°i
//             _buildGameSection(context),
//
//             const SizedBox(height: 20),
//
//             // Theo d√µi v·ªã tr√≠ ng∆∞·ªùi th√¢n
//             _buildLocationTracking(),
//           ],
//         ),
//       ),
//     );
//   }
//
//   // Widget hi·ªÉn th·ªã Album l∆∞u tr·ªØ
//   Widget _buildAlbumStorage(BuildContext context) {
//     return Column(
//       crossAxisAlignment: CrossAxisAlignment.start,
//       children: [
//         Row(
//           mainAxisAlignment: MainAxisAlignment.spaceBetween,
//           children: [
//             const Text(
//               'Album l∆∞u tr·ªØ',
//               style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
//             ),
//             GestureDetector(
//               onTap: () {
//                 Navigator.push(
//                   context,
//                   MaterialPageRoute(builder: (context) => const AlbumPage()), // Chuy·ªÉn ƒë·∫øn AlbumPage
//                 );
//               },
//               child: const Text(
//                 'Xem t·∫•t c·∫£',
//                 style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
//               ),
//             ),
//           ],
//         ),
//
//         const SizedBox(height: 5),
//
//         // Hi·ªÉn th·ªã dung l∆∞·ª£ng ƒë√£ d√πng
//         Row(
//           children: [
//             const Icon(Icons.storage, color: Colors.green),
//             const SizedBox(width: 8),
//             Expanded(
//               child: Text('ƒê√£ s·ª≠ d·ª•ng ${totalStorageUsed.toStringAsFixed(2)} MB trong t·ªïng s·ªë 5 GB'),
//             ),
//           ],
//         ),
//
//         const SizedBox(height: 5),
//
//         // Progress bar hi·ªÉn th·ªã ph·∫ßn trƒÉm dung l∆∞·ª£ng
//         Container(
//           height: 5,
//           decoration: BoxDecoration(
//             color: Colors.grey[300],
//             borderRadius: BorderRadius.circular(3),
//           ),
//           child: FractionallySizedBox(
//             widthFactor: (totalStorageUsed / 15000).clamp(0.0, 1.0), // T√≠nh ph·∫ßn trƒÉm d·ª±a tr√™n 15GB
//             child: Container(
//               decoration: BoxDecoration(
//                 color: Colors.orange,
//                 borderRadius: BorderRadius.circular(3),
//               ),
//             ),
//           ),
//         ),
//
//         const SizedBox(height: 10),
//
//         // Hi·ªÉn th·ªã ·∫£nh t·ª´ API
//         // Hi·ªÉn th·ªã ·∫£nh t·ª´ API ho·∫∑c th√¥ng b√°o n·∫øu kh√¥ng c√≥ ·∫£nh
//         isLoading
//             ? const Center(child: CircularProgressIndicator())
//             : photos.isEmpty
//             ? const Center(
//           child: Padding(
//             padding: EdgeInsets.symmetric(vertical: 20),
//             child: Text(
//               "B·∫°n ch∆∞a c√≥ album l∆∞u tr·ªØ n√†o.",
//               style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.grey),
//             ),
//           ),
//         )
//             : GridView.builder(
//           shrinkWrap: true,
//           physics: const NeverScrollableScrollPhysics(),
//           gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
//             crossAxisCount: 4,
//             crossAxisSpacing: 6,
//             mainAxisSpacing: 6,
//             childAspectRatio: 1.2,
//           ),
//           itemCount: photos.length > 7 ? 8 : photos.length,
//           itemBuilder: (context, index) {
//             if (index == 7 && photos.length > 7) {
//               return Container(
//                 decoration: BoxDecoration(
//                   color: Colors.grey[300],
//                   borderRadius: BorderRadius.circular(6),
//                 ),
//                 child: Center(
//                   child: Text(
//                     '+${photos.length - 7}',
//                     style: const TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
//                   ),
//                 ),
//               );
//             }
//
//             return GestureDetector(
//               onTap: () => _showFullImage(context, photos[index]), // ‚úÖ Th√™m ch·ª©c nƒÉng zoom ·∫£nh
//               child: ClipRRect(
//                 borderRadius: BorderRadius.circular(6),
//                 child: Image.network(
//                   photos[index],
//                   fit: BoxFit.cover,
//                 ),
//               ),
//             );
//           },
//         ),
//       ],
//     );
//   }
//
//
//   // Widget hi·ªÉn th·ªã danh s√°ch tr√≤ ch∆°i
//   Widget _buildGameSection(BuildContext context) {
//     final List<Map<String, dynamic>> games = [
//       {
//         "name": "Trivia Night",
//         "image": "https://medfordbrew.com/wp-content/uploads/2023/09/trivia.jpeg",
//         "description": "Th·∫£o lu·∫≠n nhanh v√† ch·ªçn ƒë√°p √°n ch√≠nh x√°c ƒë·ªÉ gi√†nh chi·∫øn th·∫Øng!",
//         "rules": "Ng∆∞·ªùi ch∆°i l·∫ßn l∆∞·ª£t tr·∫£ l·ªùi c√°c c√¢u h·ªèi theo ch·ªß ƒë·ªÅ. M·ªói c√¢u h·ªèi c√≥ th·ªùi gian suy nghƒ© l√† 30 gi√¢y. Tr·∫£ l·ªùi ƒë√∫ng ƒë∆∞·ª£c 1 ƒëi·ªÉm, tr·∫£ l·ªùi sai kh√¥ng b·ªã tr·ª´ ƒëi·ªÉm. Ai c√≥ nhi·ªÅu ƒëi·ªÉm nh·∫•t sau 10 c√¢u h·ªèi l√† ng∆∞·ªùi chi·∫øn th·∫Øng.",
//         "suggested_topics": [
//           {
//             "topic": "ƒê·ªông v·∫≠t",
//             "question": "Con g√¨ c√≥ t·ªëc ƒë·ªô ch·∫°y nhanh nh·∫•t tr√™n m·∫∑t ƒë·∫•t?",
//             "options": ["A. Ng·ª±a", "B. B√°o G√™-pa", "C. Ch√≥ s√≥i"],
//             "answer": "B. B√°o G√™-pa"
//           },
//           {
//             "topic": "Khoa h·ªçc",
//             "question": "Nguy√™n t·ªë n√†o c√≥ k√Ω hi·ªáu h√≥a h·ªçc l√† O?",
//             "options": ["A. Oxy", "B. V√†ng", "C. B·∫°c"],
//             "answer": "A. Oxy"
//           }
//         ]
//       },
//       {
//         "name": "Two Truths and a Lie",
//         "image": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQuYQMIcLYfscNhQ_qWVBlbAn16TVc6_cFKcBDQ9bezjdNBmOhxfmGuX_Xhf9SGnWcSw2w&usqp=CAU",
//         "description": "M·ªói ng∆∞·ªùi ƒë∆∞a ra ba c√¢u v·ªÅ b·∫£n th√¢n ‚Äì hai ƒë√∫ng, m·ªôt sai. Nh·ªØng ng∆∞·ªùi kh√°c ph·∫£i ƒëo√°n!",
//         "rules": "M·ªói ng∆∞·ªùi chia s·∫ª 3 c√¢u v·ªÅ b·∫£n th√¢n: 2 c√¢u ƒë√∫ng, 1 c√¢u sai. C√°c th√†nh vi√™n kh√°c ph·∫£i ƒëo√°n c√¢u n√†o l√† sai. N·∫øu ƒëo√°n ƒë√∫ng, ƒë∆∞·ª£c 1 ƒëi·ªÉm. Ng∆∞·ªùi ƒë∆∞a ra c√¢u h·ªèi l·ª´a ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi nh·∫•t s·∫Ω chi·∫øn th·∫Øng.",
//         "suggested_topics": [
//           {
//             "topic": "S·ªü th√≠ch c√° nh√¢n",
//             "examples": ["T√¥i th√≠ch ƒÉn pizza.", "T√¥i ƒë√£ t·ª´ng leo n√∫i Everest.", "T√¥i c√≥ m·ªôt con m√®o t√™n l√† Miu."],
//             "note": "Ng∆∞·ªùi ch∆°i ph·∫£i ƒëo√°n xem c√¢u n√†o l√† sai."
//           },
//           {
//             "topic": "Tr·∫£i nghi·ªám cu·ªôc s·ªëng",
//             "examples": ["T√¥i ƒë√£ t·ª´ng nh·∫£y d√π.", "T√¥i ƒë√£ g·∫∑p ng∆∞·ªùi n·ªïi ti·∫øng.", "T√¥i ch∆∞a bao gi·ªù ƒëi m√°y bay."],
//             "note": "Ng∆∞·ªùi ch∆°i ph·∫£i ƒëo√°n xem c√¢u n√†o l√† sai."
//           }
//         ]
//       },
//       {
//         "name": "Charades",
//         "image": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTBfv_kfXwTLmlOJh8au5TQ3AKxi3dB9sL0Tw&s",
//         "description": "Di·ªÖn t·∫£ m·ªôt t·ª´ ho·∫∑c c·ª•m t·ª´ m√† kh√¥ng n√≥i, ƒë·ªÉ ƒë·ªôi c·ªßa b·∫°n ƒëo√°n!",
//         "rules": "M·ªôt ng∆∞·ªùi s·∫Ω di·ªÖn t·∫£ t·ª´/c·ª•m t·ª´ b·∫±ng h√†nh ƒë·ªông, kh√¥ng ƒë∆∞·ª£c n√≥i. C√°c th√†nh vi√™n c√≤n l·∫°i ƒëo√°n trong 1 ph√∫t. N·∫øu ƒëo√°n ƒë√∫ng, ƒë·ªôi ƒë∆∞·ª£c 1 ƒëi·ªÉm. H·∫øt th·ªùi gian m√† ch∆∞a ƒëo√°n ƒë√∫ng th√¨ kh√¥ng c√≥ ƒëi·ªÉm. ƒê·ªôi n√†o c√≥ nhi·ªÅu ƒëi·ªÉm nh·∫•t sau 5 l∆∞·ª£t ch∆°i s·∫Ω th·∫Øng.",
//         "suggested_topics": [
//           {
//             "topic": "H√†nh ƒë·ªông",
//             "examples": ["ƒê√°nh rƒÉng", "Ch·∫°y b·ªô", "Nh·∫£y m√∫a"]
//           },
//           {
//             "topic": "Nh√¢n v·∫≠t ho·∫°t h√¨nh",
//             "examples": ["Pikachu", "Doraemon", "Elsa"]
//           }
//         ]
//       },
//       {
//         "name": "Scavenger Hunt",
//         "image": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSk87sPeRlrkU-inLxEbah8RsCnl0pbVX9KurNzb3vEffmKiei0uP4OBL2ibeUP-0goC58&usqp=CAU",
//         "description": "T√¨m v√† thu th·∫≠p c√°c v·∫≠t ph·∫©m trong danh s√°ch trong th·ªùi gian gi·ªõi h·∫°n!",
//         "rules": "M·ªói ƒë·ªôi/c√° nh√¢n s·∫Ω c√≥ m·ªôt danh s√°ch ƒë·ªì v·∫≠t c·∫ßn t√¨m. Ai t√¨m ƒë·ªß t·∫•t c·∫£ c√°c m√≥n ƒë·ªì trong danh s√°ch ƒë·∫ßu ti√™n s·∫Ω chi·∫øn th·∫Øng. N·∫øu kh√¥ng ai t√¨m ƒë·ªß, ng∆∞·ªùi t√¨m ƒë∆∞·ª£c nhi·ªÅu m√≥n nh·∫•t trong 5 ph√∫t s·∫Ω th·∫Øng.",
//         "suggested_topics": [
//           {
//             "topic": "ƒê·ªì v·∫≠t trong nh√†",
//             "examples": ["M·ªôt chi·∫øc d√©p m√†u xanh", "M·ªôt c√°i mu·ªóng", "M·ªôt quy·ªÉn s√°ch c√≥ b√¨a ƒë·ªè"]
//           },
//           {
//             "topic": "Thi√™n nhi√™n",
//             "examples": ["M·ªôt chi·∫øc l√° to", "M·ªôt vi√™n ƒë√° nh·ªè", "M·ªôt c√†nh hoa"]
//           }
//         ]
//       }
//     ];
//
//     return Column(
//       crossAxisAlignment: CrossAxisAlignment.start,
//       children: [
//         Row(
//           children: [
//             const Icon(Icons.videogame_asset, color: Colors.blue, size: 26),
//             const SizedBox(width: 8),
//             const Text(
//               'Tr√≤ ch∆°i',
//               style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
//             ),
//           ],
//         ),
//
//         const SizedBox(height: 10),
//
//         // Danh s√°ch game (K√≠ch th∆∞·ªõc nh·ªè h∆°n)
//         // Danh s√°ch game (K√≠ch th∆∞·ªõc nh·ªè h∆°n)
//         GridView.builder(
//           shrinkWrap: true,
//           physics: const NeverScrollableScrollPhysics(),
//           gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
//             crossAxisCount: 4, // 4 game tr√™n m·ªôt h√†ng
//             crossAxisSpacing: 6,
//             mainAxisSpacing: 6,
//             childAspectRatio: 1, // C√¢n ƒë·ªëi h√¨nh ·∫£nh
//           ),
//           itemCount: games.length,
//           itemBuilder: (context, index) {
//             return GestureDetector(
//               onTap: () {
//                 _showGameDetailModal(
//                   context,
//                   games[index]["name"]!,
//                   games[index]["image"]!,
//                   games[index]["description"]!,
//                   games[index]["rules"] ?? "",
//                   (games[index]["suggested_topics"] as List<dynamic>).cast<Map<String, dynamic>>() ?? [],
//                 );
//               },
//               child: Container(
//                 decoration: BoxDecoration(
//                   color: Colors.grey[300],
//                   borderRadius: BorderRadius.circular(6),
//                 ),
//                 child: ClipRRect(
//                   borderRadius: BorderRadius.circular(6),
//                   child: Stack(
//                     fit: StackFit.expand,
//                     children: [
//                       // H√¨nh ·∫£nh game
//                       Image.network(
//                         games[index]["image"]!,
//                         fit: BoxFit.cover,
//                       ),
//
//                       // Overlay m·ªù gi√∫p ch·ªØ d·ªÖ ƒë·ªçc
//                       Container(
//                         decoration: BoxDecoration(
//                           color: Colors.black.withOpacity(0.4),
//                           borderRadius: BorderRadius.circular(6),
//                         ),
//                       ),
//
//                       // T√™n game hi·ªÉn th·ªã tr√™n ·∫£nh
//                       Center(
//                         child: Text(
//                           games[index]["name"]!,
//                           textAlign: TextAlign.center,
//                           style: TextStyle(
//                             fontSize: 12,
//                             fontWeight: FontWeight.bold,
//                             color: Colors.white, // Ch·ªØ m√†u tr·∫Øng ƒë·ªÉ n·ªïi b·∫≠t tr√™n ·∫£nh
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             );
//           },
//         ),
//       ],
//     );
//   }
//
//   void _showGameDetailModal(BuildContext context, String gameName, String gameImage, String gameDescription, String gameRules, List<Map<String, dynamic>> suggestedTopics) {
//     showModalBottomSheet(
//       context: context,
//       isScrollControlled: true,
//       shape: RoundedRectangleBorder(
//         borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
//       ),
//       builder: (context) {
//         return Padding(
//           padding: EdgeInsets.only(
//             bottom: MediaQuery.of(context).viewInsets.bottom,
//           ),
//           child: Container(
//             padding: EdgeInsets.all(16),
//             child: SingleChildScrollView(  // ƒê·ªÉ tr√°nh l·ªói UI b·ªã tr√†n khi danh s√°ch d√†i
//               child: Column(
//                 mainAxisSize: MainAxisSize.min,
//                 crossAxisAlignment: CrossAxisAlignment.start,
//                 children: [
//                   Row(
//                     mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                     children: [
//                       Text(gameName, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
//                       IconButton(
//                         icon: Icon(Icons.close),
//                         onPressed: () => Navigator.pop(context),
//                       ),
//                     ],
//                   ),
//                   Divider(),
//
//                   // ·∫¢nh game
//                   Center(
//                     child: ClipRRect(
//                       borderRadius: BorderRadius.circular(10),
//                       child: Image.network(
//                         gameImage,
//                         height: 150,
//                         width: double.infinity,
//                         fit: BoxFit.cover,
//                       ),
//                     ),
//                   ),
//
//                   SizedBox(height: 10),
//
//                   // M√¥ t·∫£ game
//                   Text(gameDescription, style: TextStyle(fontSize: 14)),
//
//                   SizedBox(height: 15),
//
//                   // Lu·∫≠t ch∆°i
//                   if (gameRules.isNotEmpty) ...[
//                     Text("üìú Lu·∫≠t ch∆°i:", style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
//                     SizedBox(height: 5),
//                     Text(gameRules, style: TextStyle(fontSize: 14)),
//                     SizedBox(height: 15),
//                   ],
//
//                   // Ch·ªß ƒë·ªÅ g·ª£i √Ω
//                   // Ch·ªß ƒë·ªÅ g·ª£i √Ω
//                   if (suggestedTopics.isNotEmpty) ...[
//                     Text("üìå G·ª£i √Ω ch·ªß ƒë·ªÅ:", style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
//                     SizedBox(height: 10),
//                     Column(
//                       crossAxisAlignment: CrossAxisAlignment.start,
//                       children: suggestedTopics.map((topic) {
//                         return Padding(
//                           padding: EdgeInsets.only(bottom: 10),
//                           child: Column(
//                             crossAxisAlignment: CrossAxisAlignment.start,
//                             children: [
//                               Text("‚Ä¢ ${topic['topic']}", style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
//                               SizedBox(height: 5),
//                               if (topic.containsKey('question')) // Ki·ªÉm tra n·∫øu c√≥ question
//                                 Text(" ${topic['question']}", style: TextStyle(fontSize: 14)),
//                               if (topic.containsKey('options')) // Ki·ªÉm tra n·∫øu c√≥ options
//                                 Text(" ${topic['options']?.join(', ')}", style: TextStyle(fontSize: 14, color: Colors.grey[600])),
//                               if (topic.containsKey('answer')) // Ki·ªÉm tra n·∫øu c√≥ answer
//                                 Text("‚úÖ ƒê√°p √°n: ${topic['answer']}", style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: Colors.green)),
//                               if (topic.containsKey('examples')) // Ki·ªÉm tra n·∫øu c√≥ examples
//                                 Column(
//                                   crossAxisAlignment: CrossAxisAlignment.start,
//                                   children: [
//                                     Text("üìù V√≠ d·ª•:", style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: Colors.blueGrey)),
//                                     SizedBox(height: 5),
//                                     ...topic['examples'].map<Widget>((ex) => Text(" $ex", style: TextStyle(fontSize: 14, color: Colors.grey[700]))).toList(),
//                                   ],
//                                 ),
//                               if (topic.containsKey('note')) // N·∫øu c√≥ ghi ch√∫
//                                 Text("‚ÑπÔ∏è ${topic['note']}", style: TextStyle(fontSize: 14, fontStyle: FontStyle.italic, color: Colors.blueGrey)),
//                             ],
//                           ),
//                         );
//                       }).toList(),
//                     ),
//                   ]
//
//                 ],
//               ),
//             ),
//           ),
//         );
//       },
//     );
//   }
//
//
//
//
//   // Widget hi·ªÉn th·ªã theo d√µi v·ªã tr√≠ ng∆∞·ªùi th√¢n
//   Widget _buildLocationTracking() {
//     return Column(
//       crossAxisAlignment: CrossAxisAlignment.start,
//       children: [
//         Row(
//           children: [
//             const Icon(Icons.navigation, color: Colors.orange, size: 26),
//             const SizedBox(width: 8),
//             const Text(
//               'Theo d√µi v·ªã tr√≠ ng∆∞·ªùi th√¢n',
//               style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
//             ),
//           ],
//         ),
//       ],
//     );
//   }
//
// // Thanh ƒëi·ªÅu h∆∞·ªõng d∆∞·ªõi
//
// }

import 'dart:ui';

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:nest_mobile/album.dart';
import 'package:nest_mobile/googleMapFlutter.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'game_detail.dart';

class ExplorePage extends StatefulWidget {
  const ExplorePage({Key? key}) : super(key: key);

  @override
  _ExplorePageState createState() => _ExplorePageState();
}

class _ExplorePageState extends State<ExplorePage> {
  List<String> photos = [];
  bool isLoading = true;
  int totalPhotos = 0;
  double totalStorageUsed = 0; // Dung l∆∞·ª£ng ƒë√£ s·ª≠ d·ª•ng (MB)

  @override
  void initState() {
    super.initState();
    _fetchPhotos();
  }

  void _showFullImage(BuildContext context, String imageUrl) {
    showDialog(
      context: context,
      barrierDismissible: true, // ‚úÖ Cho ph√©p ƒë√≥ng khi nh·∫•n ra ngo√†i
      builder: (context) {
        return Dialog(
          backgroundColor: Colors.transparent, // ‚úÖ Kh√¥ng c√≥ vi·ªÅn tr·∫Øng
          child: Stack(
            children: [
              // ‚úÖ L·ªõp n·ªÅn l√†m m·ªù
              BackdropFilter(
                filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10), // ‚úÖ Hi·ªáu ·ª©ng blur n·ªÅn sau
                child: Container(
                  color: Colors.grey.withOpacity(0), // ‚úÖ N·ªÅn x√°m nh·∫π v·ªõi ƒë·ªô trong su·ªët
                ),
              ),

              // ‚úÖ Hi·ªÉn th·ªã ·∫£nh (c√≥ th·ªÉ zoom)
              Center(
                child: InteractiveViewer(
                  child: Image.network(imageUrl, fit: BoxFit.contain),
                ),
              ),

              // ‚úÖ N√∫t "X" ƒë·ªÉ ƒë√≥ng
              Positioned(
                top: 10,
                right: 10,
                child: IconButton(
                  icon: Icon(Icons.close, color: Colors.white, size: 30),
                  onPressed: () => Navigator.pop(context), // ‚úÖ ƒê√≥ng modal
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  /// üìå L·∫•y ·∫£nh t·ª´ API
  Future<void> _fetchPhotos() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      String? familyId = prefs.getString('familyId');

      if (familyId == null) {
        setState(() {
          isLoading = false;
        });
        return;
      }

      String apiUrl = 'https://platform-family.onrender.com/album/$familyId';
      Dio dio = Dio();
      Response response = await dio.get(apiUrl);

      if (response.statusCode == 200 && response.data['ok'] == true) {
        List<Map<String, dynamic>> albums = List<Map<String, dynamic>>.from(response.data['data']);
        List<String> fetchedPhotos = [];

        for (var album in albums) {
          fetchedPhotos.addAll(List<String>.from(album['photos']));
        }

        setState(() {
          photos = fetchedPhotos;
          totalPhotos = fetchedPhotos.length;
          totalStorageUsed = totalPhotos * 5.0; // M·ªói ·∫£nh 5MB
          isLoading = false;
        });
      } else {
        setState(() {
          isLoading = false;
        });
      }
    } catch (e) {
      print("Error fetching photos: $e");
      setState(() {
        isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: const Text('Kh√°m ph√°', style: TextStyle(fontWeight: FontWeight.bold)),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Album l∆∞u tr·ªØ
            _buildAlbumStorage(context),

            const SizedBox(height: 20),

            // Tr√≤ ch∆°i
            _buildGameSection(context),

            const SizedBox(height: 20),

            // Theo d√µi v·ªã tr√≠ ng∆∞·ªùi th√¢n
            _buildLocationTracking(context),
          ],
        ),
      ),
    );
  }

  // Widget hi·ªÉn th·ªã Album l∆∞u tr·ªØ
  Widget _buildAlbumStorage(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text(
              'Album l∆∞u tr·ªØ',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            GestureDetector(
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const AlbumPage()), // Chuy·ªÉn ƒë·∫øn AlbumPage
                );
              },
              child: const Text(
                'Xem t·∫•t c·∫£',
                style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
              ),
            ),
          ],
        ),

        const SizedBox(height: 5),

        // Hi·ªÉn th·ªã dung l∆∞·ª£ng ƒë√£ d√πng
        Row(
          children: [
            const Icon(Icons.storage, color: Colors.green),
            const SizedBox(width: 8),
            Expanded(
              child: Text('ƒê√£ s·ª≠ d·ª•ng ${totalStorageUsed.toStringAsFixed(2)} MB trong t·ªïng s·ªë 5 GB'),
            ),
          ],
        ),

        const SizedBox(height: 5),

        // Progress bar hi·ªÉn th·ªã ph·∫ßn trƒÉm dung l∆∞·ª£ng
        Container(
          height: 5,
          decoration: BoxDecoration(
            color: Colors.grey[300],
            borderRadius: BorderRadius.circular(3),
          ),
          child: FractionallySizedBox(
            widthFactor: (totalStorageUsed / 15000).clamp(0.0, 1.0), // T√≠nh ph·∫ßn trƒÉm d·ª±a tr√™n 15GB
            child: Container(
              decoration: BoxDecoration(
                color: Colors.orange,
                borderRadius: BorderRadius.circular(3),
              ),
            ),
          ),
        ),

        const SizedBox(height: 10),

        // Hi·ªÉn th·ªã ·∫£nh t·ª´ API
        // Hi·ªÉn th·ªã ·∫£nh t·ª´ API ho·∫∑c th√¥ng b√°o n·∫øu kh√¥ng c√≥ ·∫£nh
        isLoading
            ? const Center(child: CircularProgressIndicator())
            : photos.isEmpty
            ? const Center(
          child: Padding(
            padding: EdgeInsets.symmetric(vertical: 20),
            child: Text(
              "B·∫°n ch∆∞a c√≥ album l∆∞u tr·ªØ n√†o.",
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.grey),
            ),
          ),
        )
            : GridView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 4,
            crossAxisSpacing: 6,
            mainAxisSpacing: 6,
            childAspectRatio: 1.2,
          ),
          itemCount: photos.length > 7 ? 8 : photos.length,
          itemBuilder: (context, index) {
            if (index == 7 && photos.length > 7) {
              return Container(
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(6),
                ),
                child: Center(
                  child: Text(
                    '+${photos.length - 7}',
                    style: const TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
                  ),
                ),
              );
            }

            return GestureDetector(
              onTap: () => _showFullImage(context, photos[index]), // ‚úÖ Th√™m ch·ª©c nƒÉng zoom ·∫£nh
              child: ClipRRect(
                borderRadius: BorderRadius.circular(6),
                child: Image.network(
                  photos[index],
                  fit: BoxFit.cover,
                ),
              ),
            );
          },
        ),
      ],
    );
  }


  // Widget hi·ªÉn th·ªã danh s√°ch tr√≤ ch∆°i
  Widget _buildGameSection(BuildContext context) {
    final List<Map<String, dynamic>> games = [
      {
        "name": "Trivia Night",
        "image": "https://medfordbrew.com/wp-content/uploads/2023/09/trivia.jpeg",
        "description": "Th·∫£o lu·∫≠n nhanh v√† ch·ªçn ƒë√°p √°n ch√≠nh x√°c ƒë·ªÉ gi√†nh chi·∫øn th·∫Øng!",
        "rules": "Ng∆∞·ªùi ch∆°i l·∫ßn l∆∞·ª£t tr·∫£ l·ªùi c√°c c√¢u h·ªèi theo ch·ªß ƒë·ªÅ. M·ªói c√¢u h·ªèi c√≥ th·ªùi gian suy nghƒ© l√† 30 gi√¢y. Tr·∫£ l·ªùi ƒë√∫ng ƒë∆∞·ª£c 1 ƒëi·ªÉm, tr·∫£ l·ªùi sai kh√¥ng b·ªã tr·ª´ ƒëi·ªÉm. Ai c√≥ nhi·ªÅu ƒëi·ªÉm nh·∫•t sau 10 c√¢u h·ªèi l√† ng∆∞·ªùi chi·∫øn th·∫Øng.",
        "suggested_topics": [
          {
            "topic": "ƒê·ªông v·∫≠t",
            "question": "Con g√¨ c√≥ t·ªëc ƒë·ªô ch·∫°y nhanh nh·∫•t tr√™n m·∫∑t ƒë·∫•t?",
            "options": ["A. Ng·ª±a", "B. B√°o G√™-pa", "C. Ch√≥ s√≥i"],
            "answer": "B. B√°o G√™-pa"
          },
          {
            "topic": "Khoa h·ªçc",
            "question": "Nguy√™n t·ªë n√†o c√≥ k√Ω hi·ªáu h√≥a h·ªçc l√† O?",
            "options": ["A. Oxy", "B. V√†ng", "C. B·∫°c"],
            "answer": "A. Oxy"
          }
        ]
      },
      {
        "name": "Two Truths and a Lie",
        "image": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQuYQMIcLYfscNhQ_qWVBlbAn16TVc6_cFKcBDQ9bezjdNBmOhxfmGuX_Xhf9SGnWcSw2w&usqp=CAU",
        "description": "M·ªói ng∆∞·ªùi ƒë∆∞a ra ba c√¢u v·ªÅ b·∫£n th√¢n ‚Äì hai ƒë√∫ng, m·ªôt sai. Nh·ªØng ng∆∞·ªùi kh√°c ph·∫£i ƒëo√°n!",
        "rules": "M·ªói ng∆∞·ªùi chia s·∫ª 3 c√¢u v·ªÅ b·∫£n th√¢n: 2 c√¢u ƒë√∫ng, 1 c√¢u sai. C√°c th√†nh vi√™n kh√°c ph·∫£i ƒëo√°n c√¢u n√†o l√† sai. N·∫øu ƒëo√°n ƒë√∫ng, ƒë∆∞·ª£c 1 ƒëi·ªÉm. Ng∆∞·ªùi ƒë∆∞a ra c√¢u h·ªèi l·ª´a ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi nh·∫•t s·∫Ω chi·∫øn th·∫Øng.",
        "suggested_topics": [
          {
            "topic": "S·ªü th√≠ch c√° nh√¢n",
            "examples": ["T√¥i th√≠ch ƒÉn pizza.", "T√¥i ƒë√£ t·ª´ng leo n√∫i Everest.", "T√¥i c√≥ m·ªôt con m√®o t√™n l√† Miu."],
            "note": "Ng∆∞·ªùi ch∆°i ph·∫£i ƒëo√°n xem c√¢u n√†o l√† sai."
          },
          {
            "topic": "Tr·∫£i nghi·ªám cu·ªôc s·ªëng",
            "examples": ["T√¥i ƒë√£ t·ª´ng nh·∫£y d√π.", "T√¥i ƒë√£ g·∫∑p ng∆∞·ªùi n·ªïi ti·∫øng.", "T√¥i ch∆∞a bao gi·ªù ƒëi m√°y bay."],
            "note": "Ng∆∞·ªùi ch∆°i ph·∫£i ƒëo√°n xem c√¢u n√†o l√† sai."
          }
        ]
      },
      {
        "name": "Charades",
        "image": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTBfv_kfXwTLmlOJh8au5TQ3AKxi3dB9sL0Tw&s",
        "description": "Di·ªÖn t·∫£ m·ªôt t·ª´ ho·∫∑c c·ª•m t·ª´ m√† kh√¥ng n√≥i, ƒë·ªÉ ƒë·ªôi c·ªßa b·∫°n ƒëo√°n!",
        "rules": "M·ªôt ng∆∞·ªùi s·∫Ω di·ªÖn t·∫£ t·ª´/c·ª•m t·ª´ b·∫±ng h√†nh ƒë·ªông, kh√¥ng ƒë∆∞·ª£c n√≥i. C√°c th√†nh vi√™n c√≤n l·∫°i ƒëo√°n trong 1 ph√∫t. N·∫øu ƒëo√°n ƒë√∫ng, ƒë·ªôi ƒë∆∞·ª£c 1 ƒëi·ªÉm. H·∫øt th·ªùi gian m√† ch∆∞a ƒëo√°n ƒë√∫ng th√¨ kh√¥ng c√≥ ƒëi·ªÉm. ƒê·ªôi n√†o c√≥ nhi·ªÅu ƒëi·ªÉm nh·∫•t sau 5 l∆∞·ª£t ch∆°i s·∫Ω th·∫Øng.",
        "suggested_topics": [
          {
            "topic": "H√†nh ƒë·ªông",
            "examples": ["ƒê√°nh rƒÉng", "Ch·∫°y b·ªô", "Nh·∫£y m√∫a"]
          },
          {
            "topic": "Nh√¢n v·∫≠t ho·∫°t h√¨nh",
            "examples": ["Pikachu", "Doraemon", "Elsa"]
          }
        ]
      },
      {
        "name": "Scavenger Hunt",
        "image": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSk87sPeRlrkU-inLxEbah8RsCnl0pbVX9KurNzb3vEffmKiei0uP4OBL2ibeUP-0goC58&usqp=CAU",
        "description": "T√¨m v√† thu th·∫≠p c√°c v·∫≠t ph·∫©m trong danh s√°ch trong th·ªùi gian gi·ªõi h·∫°n!",
        "rules": "M·ªói ƒë·ªôi/c√° nh√¢n s·∫Ω c√≥ m·ªôt danh s√°ch ƒë·ªì v·∫≠t c·∫ßn t√¨m. Ai t√¨m ƒë·ªß t·∫•t c·∫£ c√°c m√≥n ƒë·ªì trong danh s√°ch ƒë·∫ßu ti√™n s·∫Ω chi·∫øn th·∫Øng. N·∫øu kh√¥ng ai t√¨m ƒë·ªß, ng∆∞·ªùi t√¨m ƒë∆∞·ª£c nhi·ªÅu m√≥n nh·∫•t trong 5 ph√∫t s·∫Ω th·∫Øng.",
        "suggested_topics": [
          {
            "topic": "ƒê·ªì v·∫≠t trong nh√†",
            "examples": ["M·ªôt chi·∫øc d√©p m√†u xanh", "M·ªôt c√°i mu·ªóng", "M·ªôt quy·ªÉn s√°ch c√≥ b√¨a ƒë·ªè"]
          },
          {
            "topic": "Thi√™n nhi√™n",
            "examples": ["M·ªôt chi·∫øc l√° to", "M·ªôt vi√™n ƒë√° nh·ªè", "M·ªôt c√†nh hoa"]
          }
        ]
      }
    ];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            const Icon(Icons.videogame_asset, color: Colors.blue, size: 26),
            const SizedBox(width: 8),
            const Text(
              'Tr√≤ ch∆°i',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ],
        ),

        const SizedBox(height: 10),

        // Danh s√°ch game (K√≠ch th∆∞·ªõc nh·ªè h∆°n)
        // Danh s√°ch game (K√≠ch th∆∞·ªõc nh·ªè h∆°n)
        GridView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 4, // 4 game tr√™n m·ªôt h√†ng
            crossAxisSpacing: 6,
            mainAxisSpacing: 6,
            childAspectRatio: 1, // C√¢n ƒë·ªëi h√¨nh ·∫£nh
          ),
          itemCount: games.length,
          itemBuilder: (context, index) {
            return GestureDetector(
              onTap: () {
                _showGameDetailModal(
                  context,
                  games[index]["name"]!,
                  games[index]["image"]!,
                  games[index]["description"]!,
                  games[index]["rules"] ?? "",
                  (games[index]["suggested_topics"] as List<dynamic>).cast<Map<String, dynamic>>() ?? [],
                );
              },
              child: Container(
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(6),
                ),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(6),
                  child: Stack(
                    fit: StackFit.expand,
                    children: [
                      // H√¨nh ·∫£nh game
                      Image.network(
                        games[index]["image"]!,
                        fit: BoxFit.cover,
                      ),

                      // Overlay m·ªù gi√∫p ch·ªØ d·ªÖ ƒë·ªçc
                      Container(
                        decoration: BoxDecoration(
                          color: Colors.black.withOpacity(0.4),
                          borderRadius: BorderRadius.circular(6),
                        ),
                      ),

                      // T√™n game hi·ªÉn th·ªã tr√™n ·∫£nh
                      Center(
                        child: Text(
                          games[index]["name"]!,
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                            color: Colors.white, // Ch·ªØ m√†u tr·∫Øng ƒë·ªÉ n·ªïi b·∫≠t tr√™n ·∫£nh
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            );
          },
        ),
      ],
    );
  }

  void _showGameDetailModal(BuildContext context, String gameName, String gameImage, String gameDescription, String gameRules, List<Map<String, dynamic>> suggestedTopics) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) {
        return Padding(
          padding: EdgeInsets.only(
            bottom: MediaQuery.of(context).viewInsets.bottom,
          ),
          child: Container(
            padding: EdgeInsets.all(16),
            child: SingleChildScrollView(  // ƒê·ªÉ tr√°nh l·ªói UI b·ªã tr√†n khi danh s√°ch d√†i
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(gameName, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                      IconButton(
                        icon: Icon(Icons.close),
                        onPressed: () => Navigator.pop(context),
                      ),
                    ],
                  ),
                  Divider(),

                  // ·∫¢nh game
                  Center(
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(10),
                      child: Image.network(
                        gameImage,
                        height: 150,
                        width: double.infinity,
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),

                  SizedBox(height: 10),

                  // M√¥ t·∫£ game
                  Text(gameDescription, style: TextStyle(fontSize: 14)),

                  SizedBox(height: 15),

                  // Lu·∫≠t ch∆°i
                  if (gameRules.isNotEmpty) ...[
                    Text("üìú Lu·∫≠t ch∆°i:", style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                    SizedBox(height: 5),
                    Text(gameRules, style: TextStyle(fontSize: 14)),
                    SizedBox(height: 15),
                  ],

                  // Ch·ªß ƒë·ªÅ g·ª£i √Ω
                  // Ch·ªß ƒë·ªÅ g·ª£i √Ω
                  if (suggestedTopics.isNotEmpty) ...[
                    Text("üìå G·ª£i √Ω ch·ªß ƒë·ªÅ:", style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                    SizedBox(height: 10),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: suggestedTopics.map((topic) {
                        return Padding(
                          padding: EdgeInsets.only(bottom: 10),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text("‚Ä¢ ${topic['topic']}", style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
                              SizedBox(height: 5),
                              if (topic.containsKey('question')) // Ki·ªÉm tra n·∫øu c√≥ question
                                Text(" ${topic['question']}", style: TextStyle(fontSize: 14)),
                              if (topic.containsKey('options')) // Ki·ªÉm tra n·∫øu c√≥ options
                                Text(" ${topic['options']?.join(', ')}", style: TextStyle(fontSize: 14, color: Colors.grey[600])),
                              if (topic.containsKey('answer')) // Ki·ªÉm tra n·∫øu c√≥ answer
                                Text("‚úÖ ƒê√°p √°n: ${topic['answer']}", style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: Colors.green)),
                              if (topic.containsKey('examples')) // Ki·ªÉm tra n·∫øu c√≥ examples
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text("üìù V√≠ d·ª•:", style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: Colors.blueGrey)),
                                    SizedBox(height: 5),
                                    ...topic['examples'].map<Widget>((ex) => Text(" $ex", style: TextStyle(fontSize: 14, color: Colors.grey[700]))).toList(),
                                  ],
                                ),
                              if (topic.containsKey('note')) // N·∫øu c√≥ ghi ch√∫
                                Text("‚ÑπÔ∏è ${topic['note']}", style: TextStyle(fontSize: 14, fontStyle: FontStyle.italic, color: Colors.blueGrey)),
                            ],
                          ),
                        );
                      }).toList(),
                    ),
                  ]

                ],
              ),
            ),
          ),
        );
      },
    );
  }




  // // Widget hi·ªÉn th·ªã theo d√µi v·ªã tr√≠ ng∆∞·ªùi th√¢n
  // Widget _buildLocationTracking() {
  //   return Column(
  //     crossAxisAlignment: CrossAxisAlignment.start,
  //     children: [
  //       Row(
  //         children: [
  //           const Icon(Icons.navigation, color: Colors.orange, size: 26),
  //           const SizedBox(width: 8),
  //           const Text(
  //             'Theo d√µi v·ªã tr√≠ ng∆∞·ªùi th√¢n',
  //             style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
  //           ),
  //         ],
  //       ),
  //     ],
  //   );
  // }

// Widget hi·ªÉn th·ªã theo d√µi v·ªã tr√≠ ng∆∞·ªùi th√¢n
  Widget _buildLocationTracking(BuildContext context) {
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => GoogleMapFlutter()), // Chuy·ªÉn ƒë·∫øn LocationScreen
        );
      },
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.navigation, color: Colors.orange, size: 26),
              const SizedBox(width: 8),
              const Text(
                'Theo d√µi v·ªã tr√≠ ng∆∞·ªùi th√¢n',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
              ),
            ],
          ),
        ],
      ),
    );
  }


}